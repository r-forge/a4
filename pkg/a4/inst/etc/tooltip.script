var svgns = 'http://www.w3.org/2000/svg';
var xlinkns = 'http://www.w3.org/1999/xlink';
var toolTip = null;
var TrueCoords = null;
var tipBox = null;
var tipText = null;
var tipTitle = null;
var tipDesc = null;
var lastElement = null;
var titleText = '';
var titleDesc = '';
      

var SVGRoot = null;
var SVGViewBox = null;      

var SVGDocument = svgDocument;
SVGRoot = document.documentElement;
TrueCoords = SVGRoot.createSVGPoint();


toolTip = SVGDocument.getElementById('ToolTip');
tipBox = SVGDocument.getElementById('tipbox');
tipText = SVGDocument.getElementById('tipText');
tipTitle = SVGDocument.getElementById('tipTitle');
tipDesc = SVGDocument.getElementById('tipDesc');

function showHide(evt, targetId)
      {
         var newTarget = evt.target;
         if (targetId)
         {
            newTarget = SVGDocument.getElementById(targetId);
         }
         var newStyle = newTarget.style;
         //alert(newStyle.getPropertyValue('visibility'))
         if ('hidden' != newStyle.getPropertyValue('visibility'))
         {
            newStyle.setProperty('visibility', 'hidden');
         }
         else
         {
            newStyle.setProperty('visibility', 'visible');
         }
      }
   
    
  
   function highLightTreatment(evt,treatment,c1){
    
            GetTrueCoords(evt);
     	var targetshape = evt.getTarget();
    	 
    	var tipScale = 1/SVGRoot.currentScale;
    	var textWidth = 0;
    	var tspanWidth = 0;
    	var boxHeight = 20;
    
    	tipBox.setAttributeNS(null, 'transform', 'scale(' + tipScale + ',' + tipScale + ')' );
    	tipText.setAttributeNS(null, 'transform', 'scale(' + tipScale + ',' + tipScale + ')' );
    
    	var targetElement = evt.target;
    
    	if ( lastElement != targetElement )
    	{
    		titleText = treatment;
    		tipTitle.firstChild.nodeValue = titleText;
    
    		var titleDesc = "("+c1+")";
    		tipDesc.firstChild.nodeValue = titleDesc;
    		
    	}
    
    	var xPos = TrueCoords.x + (10 * tipScale);
    	var yPos = TrueCoords.y + (10 * tipScale);
    
    	//return rectangle around object as SVGRect object
    	var outline = tipText.getBBox();
    	tipBox.setAttributeNS(null, 'width', Number(outline.width) + 10);
    	tipBox.setAttributeNS(null, 'height', Number(outline.height) + 10);
    
    	toolTip.setAttributeNS(null, 'transform', 'translate(' + xPos + ',' + yPos + ')');
    	toolTip.setAttributeNS(null, 'display', 'inline');
}
  
  
    function highLightFactor(evt,facname,c1,c2){
  
          GetTrueCoords(evt);
   	var targetshape = evt.getTarget();
  	 
  	var tipScale = 1/SVGRoot.currentScale;
  	var textWidth = 0;
  	var tspanWidth = 0;
  	var boxHeight = 20;
  
  	tipBox.setAttributeNS(null, 'transform', 'scale(' + tipScale + ',' + tipScale + ')' );
  	tipText.setAttributeNS(null, 'transform', 'scale(' + tipScale + ',' + tipScale + ')' );
  
  	var targetElement = evt.target;
  
  	if ( lastElement != targetElement )
  	{
  		titleText = facname;
  		tipTitle.firstChild.nodeValue = titleText;
  
  		var titleDesc = "("+c1+" ; " +c2+")";
  		tipDesc.firstChild.nodeValue = titleDesc;
  		
  	}
  
  	var xPos = TrueCoords.x + (10 * tipScale);
  	var yPos = TrueCoords.y + (10 * tipScale);
  
  	//return rectangle around object as SVGRect object
  	var outline = tipText.getBBox();
  	tipBox.setAttributeNS(null, 'width', Number(outline.width) + 10);
  	tipBox.setAttributeNS(null, 'height', Number(outline.height) + 10);
  
  	toolTip.setAttributeNS(null, 'transform', 'translate(' + xPos + ',' + yPos + ')');
  	toolTip.setAttributeNS(null, 'display', 'inline');
}
function Grab(evt)
          {
             // find out which element we moused down on
             var targetElement = evt.target;
    
             // you cannot drag the background itself, so ignore any attempts to mouse down on it
             if ( BackDrop != targetElement )
             {
                //set the item moused down on as the element to be dragged
                DragTarget = targetElement;
    
                // move this element to the "top" of the display, so it is (almost)
                //    always over other elements (exception: in this case, elements that are
                //    "in the folder" (children of the folder group) with only maintain
                //    hierarchy within that group
                DragTarget.parentNode.appendChild( DragTarget );
    
                // turn off all pointer events to the dragged element, this does 2 things:
                //    1) allows us to drag text elements without selecting the text
                //    2) allows us to find out where the dragged element is dropped (see Drop)
                DragTarget.setAttributeNS(null, 'pointer-events', 'none');
    
                // we need to find the current position and translation of the grabbed element,
                //    so that we only apply the differential between the current location
                //    and the new location
                var transMatrix = DragTarget.getCTM();
                GrabPoint.x = TrueCoords.x - Number(transMatrix.e);
                GrabPoint.y = TrueCoords.y - Number(transMatrix.f);
    
             }
          };
    
    
function Drag(evt)
          {
             // account for zooming and panning
             GetTrueCoords(evt);
    
             // if we don't currently have an element in tow, don't do anything
             if (DragTarget)
             {
                // account for the offset between the element's origin and the
                //    exact place we grabbed it... this way, the drag will look more natural
                var newX = TrueCoords.x - GrabPoint.x;
                var newY = TrueCoords.y - GrabPoint.y;
    
                // apply a new tranform translation to the dragged element, to display
                //    it in its new location
                DragTarget.setAttributeNS(null, 'transform', 'translate(' + newX + ',' + newY + ')');
             }
          };
    
    
function Drop(evt)
          {
             // if we aren't currently dragging an element, don't do anything
             if ( DragTarget )
             {
                // since the element currently being dragged has its pointer-events turned off,
                //    we are afforded the opportunity to find out the element it's being dropped on
                var targetElement = evt.target;
    
                // turn the pointer-events back on, so we can grab this item later
                DragTarget.setAttributeNS(null, 'pointer-events', 'all');
                if ( 'Folder' == targetElement.parentNode.id )
                {
                   // if the dragged element is dropped on an element that is a child
                   //    of the folder group, it is inserted as a child of that group
                   targetElement.parentNode.appendChild( DragTarget );
                   alert(DragTarget.id + ' has been dropped into a folder, and has been inserted as a child of the containing group.');
                }
                else
                {
                   // for this example, you cannot drag an item out of the folder once it's in there;
                   //    however, you could just as easily do so here
                   alert(DragTarget.id + ' has been dropped on top of ' + targetElement.id);
                }
    
                // set the global variable to null, so nothing will be dragged until we
                //    grab the next element
                DragTarget = null;
             }
          };
    
function GetTrueCoords(evt)
      {
         // find the current zoom level and pan setting, and adjust the reported
         //    mouse position accordingly
         var newScale = SVGRoot.currentScale;
         var translation = SVGRoot.currentTranslate;
         TrueCoords.x = (evt.clientX - translation.x)/newScale;
         TrueCoords.y = (evt.clientY - translation.y)/newScale;
      };


 function GenerateTooltip()
      {
 
 
 	  var block = SVGDocument.createElementNS(svgns, 'g');
          block.setAttributeNS(null, 'id', 'ToolTip');
          block.setAttributeNS(null, 'opacity', 0.8);
          block.setAttributeNS(null, 'display', 'none');
          block.setAttributeNS(null, 'pointer-events', 'none');
 
          var rect = SVGDocument.createElementNS(svgns, 'rect');
          rect.setAttributeNS(null, 'id','tipbox');
          rect.setAttributeNS(null, 'x',0);
          rect.setAttributeNS(null, 'y',5);
          rect.setAttributeNS(null, 'width',88);
          rect.setAttributeNS(null, 'height',20);
          rect.setAttributeNS(null, 'rx',2);
          rect.setAttributeNS(null, 'ry',2);
          rect.setAttributeNS(null, 'fill','white');
          rect.setAttributeNS(null, 'stroke','black');

	  block.appendChild(rect);
	
	  var text =  SVGDocument.createElementNS(svgns, 'text');
	  text.setAttributeNS(null, 'id','tipText');
	  text.setAttributeNS(null, 'x',5);
	  text.setAttributeNS(null, 'y','20');
	  text.setAttributeNS(null, 'font-family','Arial');
	  text.setAttributeNS(null, 'font-size','12');
	  
	  var tspan = SVGDocument.createElementNS(svgns, 'tspan');
	  tspan.setAttributeNS(null, 'id','tipTitle');
	  tspan.setAttributeNS(null, 'x','5');
	  tspan.setAttributeNS(null, 'font-weight','bold');
	  tspan.setAttributeNS(null, 'Title','tipTitle');
   	  tspan.appendChild(SVGDocument.createTextNode(''));
 	  text.appendChild(tspan);
	  
	  var tspan2 = SVGDocument.createElementNS(svgns, 'tspan');
          tspan2.setAttributeNS(null, 'id','tipDesc');
	  tspan2.setAttributeNS(null, 'x','5');
	  tspan2.setAttributeNS(null, 'fill','blue');
	  tspan2.setAttributeNS(null, 'dy','1.2em');
	  tspan2.setAttributeNS(null, 'Desc','tipDescription');
	  tspan2.appendChild(SVGDocument.createTextNode(''));
	  text.appendChild(tspan2);
	  
	 block.appendChild(text);

         return block;
      };

  var shape = GenerateTooltip();
  SVGRoot.appendChild(shape);
  	tipBox = SVGDocument.getElementById('tipbox');
           tipText = SVGDocument.getElementById('tipText');
           tipTitle = SVGDocument.getElementById('tipTitle');
           tipDesc = SVGDocument.getElementById('tipDesc');
 toolTip = SVGDocument.getElementById('ToolTip');
